// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../dbml"
  outputName = "vod_streaming.dbml"
  projectName = "VOD Streaming"
  projectDatabaseType = "PostgreSQL"
  projectNote = "ERDiagram VOD Streaming"
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  nickname      String?
  follower      Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  video         Video[]
  comment       Comment[]
  post          Post[]
  love_log      Love_log[]
  view_log      View_log[]
  followers     Followers[] @relation("UserFollowers")
  following     Followers[] @relation("UserFollowing")
  purchase      Purchase[]
  report        Report[]

  @@map("users")
}

model Video {
  id            String   @id @default(cuid())
  title         String?
  description   String?
  thumbnail     String?
  type          Int?
  price_rent    Float?
  price_sell    Float?
  Love_count    Int?
  slug          String?  @unique
  path          String?  @unique
  view_count    Int?      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  OwnerUserID   String   @map("user_id")
  user          User     @relation(fields: [OwnerUserID], references: [id], onDelete: Cascade)
  comment       Comment[]
  post          Post[]
  love_log      Love_log[]
  view_log      View_log[]
  purchase      Purchase[]
  report        Report[]

  @@map("videos")
  @@index([slug])
  @@index([path])

}


model Comment {
  id          String   @id @default(cuid())
  comment     String?
  userId      String   @map("user_id")
  videoId     String?  @map("video_id")
  postId      String?  @map("post_id")
  type        Int?
  Love_count  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  love_log    Love_log[]
  report      Report[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: SetNull)
  post     Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)

  @@map("comments")
}


model Post {
  id          String   @id @default(cuid())
  content     String?
  userId      String   @map("user_id")
  videoId     String?  @map("video_id")
  Love_count  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  love_log    Love_log[]
  comment     Comment[]
  report      Report[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: SetNull)

  @@map("Posts")
}

model Love_log {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  videoId     String?  @map("video_id")
  postId      String?  @map("post_id")
  commentId   String?  @map("comment_id")
  type        Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: SetNull)
  post     Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)
  comment     Comment?   @relation(fields: [commentId], references: [id], onDelete: SetNull)

  @@map("Love_log")
}

model Report {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  videoId     String?  @map("video_id")
  postId      String?  @map("post_id")
  commentId   String?  @map("comment_id")
  type        Int?
  reason      String
  text        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: SetNull)
  post     Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)
  comment     Comment?   @relation(fields: [commentId], references: [id], onDelete: SetNull)

  @@map("Report")
}

model View_log {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  videoId     String  @map("video_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("View_log")
}

model Purchase {

  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  videoId     String  @map("video_id")
  type        Int     
  expire_date DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("Purchase")
  @@index([userId, videoId])

}

model Followers {
  id              String    @id @default(cuid())
  userId          String   @map("user_id")
  followerUserId  String   @map("follower_user_id")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user           User     @relation("UserFollowers", fields: [userId], references: [id], onDelete: Cascade)
  follower       User     @relation("UserFollowing", fields: [followerUserId], references: [id], onDelete: Cascade)
  

  @@map("Followers")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @db.Text @map("session_token") //mysql @db.VarChar(500) @unique //postgresql @unique @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
